<shaderDocument Version="1.0"><script type="x-shader/x-vertex"><id>primitiveShader_vertex</id><code>attribute vec3 aVertexPosition;attribute vec3 aVertexNormal;attribute vec4 aVertexColor;attribute vec2 aTextureCoord;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;uniform mat3 uNMatrix;varying vec3 eyePosition;varying vec3 eyeNormal;varying vec2 vTextureCoord;varying vec4 vColor;void main(){    vec4 position = uMVMatrix * vec4( aVertexPosition, 1.0 );    if( position.w == 0.0 )    {        eyePosition = position.xyz;    }    else    {        eyePosition = position.xyz / position.w;    }    eyeNormal = uNMatrix * aVertexNormal;    vTextureCoord = aTextureCoord;    vColor = aVertexColor;    gl_Position = uPMatrix * uMVMatrix * vec4( aVertexPosition, 1.0 );}</code></script><script type="x-shader/x-vertex"><id>skyboxShader_vertex</id><code>attribute vec3 aVertexPosition;uniform mat4 uModelViewMatrix;uniform mat4 uProjectionMatrix;varying vec3 vReflectDirection;void main(){    vReflectDirection = aVertexPosition;    gl_Position = uProjectionMatrix * uModelViewMatrix * vec4( aVertexPosition, 1.0 );}</code></script><script type="x-shader/x-vertex"><id>envSphereShader_vertex</id><code>attribute vec3 aVertexPosition;attribute vec3 aVertexNormal;uniform mat4 uModelMatrix;uniform vec3 uEyePosition;uniform mat4 uModelViewMatrix;uniform mat4 uProjectionMatrix;const float eta = 0.1;varying vec3 vReflectDir;varying vec3 vRefractDir;void main(){    vec4 position = uModelMatrix * vec4( aVertexPosition, 1.0 );    vec3 worldPosition = position.xyz / position.w;    vec4 normal = uModelMatrix * vec4( aVertexNormal, 1.0 );    vec3 worldNormal = normal.xyz / normal.w;    vec3 worldView = normalize( uEyePosition - worldPosition );    vReflectDir = reflect( -worldView, worldNormal );    vRefractDir = refract( -worldView, worldNormal, eta );    gl_Position = uProjectionMatrix * uModelViewMatrix * vec4( aVertexPosition, 1.0 );}</code></script><script type="x-shader/x-vertex"><id>stripTorusShader_vertex</id><code>attribute vec3 aVertexPosition;attribute vec3 aVertexNormal;attribute vec2 aTextureCoord;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;uniform mat3 uNMatrix;varying vec3 vPositionInWorld;varying vec3 vNormalInWorld;varying vec2 vTextureCoord;void main(){    vec4 position = uMVMatrix * vec4( aVertexPosition, 1.0);    vPositionInWorld = position.xyz / position.w;    vNormalInWorld = uNMatrix * aVertexNormal;    vTextureCoord = aTextureCoord;    gl_Position = uPMatrix * uMVMatrix * vec4( aVertexPosition, 1.0 );}</code></script><script type="x-shader/x-vertex"><id>normalMapShader_vertex</id><code>attribute vec3 aVertexPosition;attribute vec3 aVertexNormal;attribute vec3 aVertexTangent;attribute vec2 aTextureCoord;uniform mat4 uModelViewMatrix;uniform mat4 uProjectionMatrix;uniform mat3 uNormalMatrix;uniform vec3 uLightPosition;varying vec2 vTextureCoord;varying vec3 vLightDirection;varying vec3 vEyeDirection;void main(){    vec3 eyeNormal = normalize( uNormalMatrix * aVertexNormal );    vec3 tangent = normalize( uNormalMatrix * aVertexTangent );    vec3 binormal = normalize( cross( eyeNormal, tangent ) );    mat3 tangentMatrix = mat3(    tangent.x, binormal.x, eyeNormal.x,    tangent.y, binormal.y, eyeNormal.y,    tangent.z, binormal.z, eyeNormal.z );    vec4 position = uModelViewMatrix * vec4( aVertexPosition, 1.0 );    vec3 eyePosition = position.xyz / position.w;    vLightDirection =  normalize( tangentMatrix * ( uLightPosition - eyePosition ) );    vEyeDirection = -normalize( tangentMatrix * eyePosition );    vTextureCoord = aTextureCoord;    gl_Position = uProjectionMatrix * uModelViewMatrix * vec4( aVertexPosition, 1.0 );}</code></script><script type="x-shader/x-vertex"><id>postProcessingShader_vertex</id><code>attribute vec2 aVertexPosition;attribute vec2 aTextureCoord;varying vec2 vTextureCoord;void main(){    vTextureCoord = aTextureCoord;    gl_Position = vec4( aVertexPosition, 0.0, 1.0 );}</code></script></shaderDocument>